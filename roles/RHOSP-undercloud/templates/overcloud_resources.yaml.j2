{% set dpdk_count = (roles_count[DefaultLeaf0.name]["ComputeOvsDpdk"] + roles_count[DefaultLeaf0.name]["ComputeOvsDpdkSriov"]) %}
{% set sriov_count = (roles_count[DefaultLeaf0.name]["ComputeSriov"] + roles_count[DefaultLeaf0.name]["ComputeOvsHwOffload"] + roles_count[DefaultLeaf0.name]["ComputeOvsDpdkSriov"]) %}

heat_template_version: {{ RHOSP_version_supported[RHOSP_version].heat_template_version }}

description: >
  HOT Template to create basic needed resources after deployment of RHOSPVirtLab

parameters:
  domain_name:
    type: string
    description: Domain name
    default: RHOSPVirtLab
  project_name:
    type: string
    description: Project name
    default: test-project
  user_name:
    type: string
    description: User name
    default: test-admin
  user_password:
    type: string
    description: User name
    default: redhat
  default_provider_network_name:
    type: string
    description: Default provider network name
    default: default-provider

  # <param name>:
  #   type: <string | number | json | comma_delimited_list | boolean>
  #   label: <human-readable name of the parameter>
  #   description: <description of the parameter>
  #   default: <default value for parameter>
  #   hidden: <true | false>
  #   constraints:
  #     <parameter constraints>
  #   immutable: <true | false>
  #   tags: <list of parameter categories>

resources:
  # Keystone resources
  domain:
    type: OS::Keystone::Domain
    deletion_policy: Retain
    properties:
      name: {get_param: domain_name}
      description: RHOSPVirtLab domain
      enabled: True
  project:
    type: OS::Keystone::Project
    depends_on: domain
    properties:
      name: {get_param: project_name}
      domain: {get_resource: domain}
      description: Test project
      enabled: True
  user:
    type: OS::Keystone::User
    depends_on: project
    properties:
      name: {get_param: user_name}
      domain: {get_resource: domain}
      description: Test admin user
      enabled: True
      password: {get_param: user_password}
      default_project: {get_resource: project}
      roles:
        - role: admin
          domain: {get_resource: domain}
        - role: admin
          project: {get_resource: project}

  # Provider network resources
  default_provider_network:
    type: OS::Neutron::ProviderNet
    deletion_policy: Retain
    properties:
      name: {get_param: default_provider_network_name}
      network_type: {{ 'vlan' if (DefaultLeaf0.networks.External.vlan is defined) else 'flat' }}
      physical_network: datacentre
{% if DefaultLeaf0.networks.External.vlan is defined %}
      segmentation_id: {{ DefaultLeaf0.networks.External.vlan | default('') }}
{% endif %}
      router_external: True
      port_security_enabled: True
      shared: True
  default_provider_subnet:
    type: OS::Neutron::Subnet
    deletion_policy: Retain
    depends_on: default_provider_network
    properties:
      name: {list_join: ['', [{get_param: default_provider_network_name}, '-subnet']]}
      network: {get_resource: default_provider_network}
      ip_version: 4
      allocation_pools:
        - start: {{ (DefaultLeaf0.networks.External.prefix ~ '.1/24') | ipmath(99) }}
          end: {{ (DefaultLeaf0.networks.External.prefix ~ '.1/24') | ipmath(249) }}
      cidr: {{ (DefaultLeaf0.networks.External.prefix ~ '.1/24') | ipaddr('network/prefix') }}
      enable_dhcp: True
      gateway_ip: {{ (DefaultLeaf0.networks.External.prefix ~ '.1/24') | ipaddr('address') }}

  # Flavor resources
{% for size in DefaultFlavorsSize %}
  flavor_m1_{{ size.name }}:
    type: OS::Nova::Flavor
    deletion_policy: Retain
    properties:
      name: m1.{{ size.name }}
      vcpus: {{ size.vcpus }}
      ram: {{ size.ram }}
      disk: {{ size.disk }}
      ephemeral: {{ size.ephemeral }}
      swap: {{ size.swap }}
      is_public: True
{% if dpdk_count > 0 %}
  flavor_pinned_{{ size.name }}:
    type: OS::Nova::Flavor
    deletion_policy: Retain
    properties:
      name: pinned.{{ size.name }}
      vcpus: {{ size.vcpus }}
      ram: {{ size.ram }}
      disk: {{ size.disk }}
      ephemeral: {{ size.ephemeral }}
      swap: {{ size.swap }}
      is_public: True
      extra_specs: { "hw:cpu_policy": "dedicated", "hw:mem_page_size": "large" }
{% endif %}
{% if sriov_count > 0 %}
  flavor_sriov_{{ size.name }}:
    type: OS::Nova::Flavor
    deletion_policy: Retain
    properties:
      name: sriov.{{ size.name }}
      vcpus: {{ size.vcpus }}
      ram: {{ size.ram }}
      disk: {{ size.disk }}
      ephemeral: {{ size.ephemeral }}
      swap: {{ size.swap }}
      is_public: True
      extra_specs: { "sriov": true, "hw:cpu_policy": "dedicated", "hw:mem_page_size": "large" }
{% endif %}
{% endfor %}

  # <resource ID>:
  #   type: <resource type>
  #   properties:
  #     <property name>: <property value>
  #   metadata:
  #     <resource specific metadata>
  #   depends_on: <resource ID or list of ID>
  #   update_policy: <update policy>
  #   deletion_policy: <deletion policy>
  #   external_id: <external resource ID>
  #   condition: <condition name or expression or boolean>

outputs:
  user_id:
    value: {get_resource: user}

  # <parameter name>:
  #   description: <description>
  #   value: <parameter value>
  #   condition: <condition name or expression or boolean>