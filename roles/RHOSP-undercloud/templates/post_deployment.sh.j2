{% set rhel_image_name = 'rhel' ~ RHOSP_version_supported[RHOSP_version].rhel_release %}
{% set rhel_image_file = RHOSP_version_supported[RHOSP_version].rhel_image.name %}
{% set ceph_count = (roles_count[DefaultLeaf0.name]["CephStorage"] + roles_count[DefaultLeaf0.name]["CephAll"]) %}
{% set hci_count = (roles_count[DefaultLeaf0.name]["ComputeHCI"] + roles_count[DefaultLeaf0.name]["DistributedComputeHCI"] + roles_count[DefaultLeaf0.name]["DistributedComputeHCIScaleOut"]) %}
#/bin/bash

{% if (RHOSP_version == 13.0) and (DCNLeafs | length > 0) %}
# Get servers list
source ~/stackrc
SERVERS=$(openstack server list -f value -c Name)
{% endif %}

source /home/stack/overcloudrc

################################################################################
### Overcloud images ###########################################################
################################################################################

{% if (DCNLeafs | length > 0) and ((ceph_count + hci_count) > 0) %}
openstack image show '{{ rhel_image_name }}' &>/dev/null || (qemu-img convert -f qcow2 -O raw images/{{ rhel_image_file }} images/{{ rhel_image_file }}.raw && glance image-create --disk-format raw --container-format bare --name '{{ rhel_image_name }}' --file images/{{ rhel_image_file }}.raw --visibility public --store {{ DefaultLeaf0.name }} && glance image-import $(openstack image show '{{ rhel_image_name }}' -c id -f value) --stores {% for dcn_leaf in DCNLeafs if (roles_count[dcn_leaf.name]["CephStorage"] + roles_count[dcn_leaf.name]["CephAll"] + roles_count[dcn_leaf.name]["ComputeHCI"] + roles_count[dcn_leaf.name]["DistributedComputeHCI"] + roles_count[dcn_leaf.name]["DistributedComputeHCIScaleOut"]) > 0 %}{{ dcn_leaf.name }}{{ "," if not loop.last else "" }}{% endfor %} --import-method copy-image)
openstack image show CirrOS &>/dev/null || (qemu-img convert -f qcow2 -O raw images/cirros.qcow2 images/cirros.raw && glance image-create --disk-format raw --container-format bare --name CirrOS --file images/cirros.raw --visibility public --store {{ DefaultLeaf0.name }} && glance image-import $(openstack image show CirrOS -c id -f value) --stores {% for dcn_leaf in DCNLeafs if (roles_count[dcn_leaf.name]["CephStorage"] + roles_count[dcn_leaf.name]["CephAll"] + roles_count[dcn_leaf.name]["ComputeHCI"] + roles_count[dcn_leaf.name]["DistributedComputeHCI"] + roles_count[dcn_leaf.name]["DistributedComputeHCIScaleOut"]) > 0 %}{{ dcn_leaf.name }}{{ "," if not loop.last else "" }}{% endfor %} --import-method copy-image)
{% else %}
openstack image show '{{ rhel_image_name }}' &>/dev/null || openstack image create --disk-format qcow2 --min-disk 12 --min-ram 1536 --file images/{{ rhel_image_file }} --public '{{ rhel_image_name }}'
openstack image show CirrOS &>/dev/null || openstack image create --disk-format qcow2 --min-disk 2 --min-ram 512 --file images/cirros.qcow2 --public CirrOS
{% endif %}
RHEL_IMAGE_ID=$(openstack image show '{{ rhel_image_name }}' -f value -c id)
CIRROS_IMAGE_ID=$(openstack image show CirrOS -f value -c id)

################################################################################
### Create Overcloud Resources by HOT Template #################################
################################################################################

SECGROUPID=$(openstack security group list | grep default | grep $(openstack project show admin -f value -c id) | awk '{print $2}')

# If the stack exists, update it
openstack stack show overcloud_resources &>/dev/null && openstack stack update \
--template /home/stack/templates/overcloud_resources.yaml \
--parameter "image_rhel_external_id=${RHEL_IMAGE_ID}" \
--parameter "image_cirros_external_id=${CIRROS_IMAGE_ID}" \
--parameter "default_security_group_id=${SECGROUPID}" \
overcloud_resources

# If the stack does not exist, create it
openstack stack show overcloud_resources &>/dev/null || openstack stack create \
--template /home/stack/templates/overcloud_resources.yaml \
--parameter "image_rhel_external_id=${RHEL_IMAGE_ID}" \
--parameter "image_cirros_external_id=${CIRROS_IMAGE_ID}" \
--parameter "default_security_group_id=${SECGROUPID}" \
overcloud_resources

{% if (RHOSP_version == 13.0) and (DCNLeafs | length > 0) %}
# Manual host addition for host aggregates needed for RHOSP 13.0 DCN
{% for leaf in DCNLeafs %}
{% if (vms | selectattr("hypervisor", "equalto", leaf.hypervisor) | selectattr("profile", "match", "compute|ceph") | list | length + physical | selectattr("leaf", "equalto", leaf.name) | selectattr("profile", "match", "compute|ceph") | list | length ) > 0 %}
for HOST in $SERVERS; do
  if [[ $HOST == *"{{ leaf.name }}"* ]]; then
    openstack aggregate add host {{ leaf.name }} $HOST.localdomain
  fi
done
{% endif %}
{% endfor %}
{% if (vms | selectattr("hypervisor", "equalto", DefaultLeaf0.hypervisor) | selectattr("profile", "match", "compute|ceph") | list | length + physical | selectattr("leaf", "equalto", DefaultLeaf0.name) | selectattr("profile", "match", "compute|ceph") | list | length ) > 0 %}
for HOST in $SERVERS; do
  if [[ $HOST == *"{{ DefaultLeaf0.name }}"* ]]; then
    openstack aggregate add host {{ DefaultLeaf0.name }} $HOST.localdomain
  fi
done
{% endif %}
{% endif %}

{% if DeployOctavia and RHOSP_version < 17%}
# Octavia configuration
openstack loadbalancer flavorprofile show amphora-single-profile &>/dev/null || openstack loadbalancer flavorprofile create --name amphora-single-profile --provider amphora --flavor-data '{"loadbalancer_topology": "SINGLE"}'
openstack loadbalancer flavor show standalone-lb &>/dev/null || openstack loadbalancer flavor create --name standalone-lb --flavorprofile amphora-single-profile --description "A non-high availability load balancer for testing."
{% endif %}

# Apply logrotate configuration to avoid full disks
source ~/stackrc
export ANSIBLE_HOST_KEY_CHECKING=False

{% if (RHOSP_version >= 17) %}
ansible -i ~/overcloud-deploy/overcloud/config-download/overcloud/tripleo-ansible-inventory.yaml -b -m lineinfile -a 'path=/etc/logrotate.d/rsyslog insertafter="{" line="    size 100M"' undercloud,{{ DefaultLeaf0.name }}
ansible -i ~/overcloud-deploy/overcloud/config-download/overcloud/tripleo-ansible-inventory.yaml -b -m lineinfile -a 'path=/etc/logrotate.d/rsyslog insertafter="{" line="    compress"' undercloud,{{ DefaultLeaf0.name }}
ansible -i ~/overcloud-deploy/overcloud/config-download/overcloud/tripleo-ansible-inventory.yaml -b -m lineinfile -a 'path=/etc/logrotate.d/rsyslog insertafter="{" line="    daily"' undercloud,{{ DefaultLeaf0.name }}
{% for leaf in DCNLeafs %}
ansible -i ~/overcloud-deploy/{{ leaf.name }}/config-download/{{ leaf.name }}/tripleo-ansible-inventory.yaml -b -m lineinfile -a 'path=/etc/logrotate.d/rsyslog insertafter="{" line="    size 100M"' {{ leaf.name }}
ansible -i ~/overcloud-deploy/{{ leaf.name }}/config-download/{{ leaf.name }}/tripleo-ansible-inventory.yaml -b -m lineinfile -a 'path=/etc/logrotate.d/rsyslog insertafter="{" line="    compress"' {{ leaf.name }}
ansible -i ~/overcloud-deploy/{{ leaf.name }}/config-download/{{ leaf.name }}/tripleo-ansible-inventory.yaml -b -m lineinfile -a 'path=/etc/logrotate.d/rsyslog insertafter="{" line="    daily"' {{ leaf.name }}
{% endfor %}
{% else %}
tripleo-ansible-inventory --static-yaml-inventory ~/tripleo-ansible-inventory.yaml
ansible -i ~/tripleo-ansible-inventory.yaml -b -m lineinfile -a 'path=/etc/logrotate.d/syslog insertafter="{" line="    size 100M"' undercloud,{{ DefaultLeaf0.name }}
ansible -i ~/tripleo-ansible-inventory.yaml -b -m lineinfile -a 'path=/etc/logrotate.d/syslog insertafter="{" line="    compress"' undercloud,{{ DefaultLeaf0.name }}
ansible -i ~/tripleo-ansible-inventory.yaml -b -m lineinfile -a 'path=/etc/logrotate.d/syslog insertafter="{" line="    daily"' undercloud,{{ DefaultLeaf0.name }}
{% for leaf in DCNLeafs %}
ansible -i ~/tripleo-ansible-inventory.yaml -b -m lineinfile -a 'path=/etc/logrotate.d/syslog insertafter="{" line="    size 100M"' {{ leaf.name }}
ansible -i ~/tripleo-ansible-inventory.yaml -b -m lineinfile -a 'path=/etc/logrotate.d/syslog insertafter="{" line="    compress"' {{ leaf.name }}
ansible -i ~/tripleo-ansible-inventory.yaml -b -m lineinfile -a 'path=/etc/logrotate.d/syslog insertafter="{" line="    daily"' {{ leaf.name }}
{% endfor %}
{% endif %}