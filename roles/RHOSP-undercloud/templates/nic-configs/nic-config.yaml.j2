heat_template_version: {{ RHOSP_version_supported[RHOSP_version].heat_template_version }}
description: >
  Software Config to drive os-net-config to configure VLANs for the {{ item.name }} role.
parameters:
  ControlPlaneIp:
    default: ''
    description: IP address/subnet on the ctlplane network
    type: string
  ControlPlaneSubnetCidr:
    default: ''
    description: >
      The subnet CIDR of the control plane network. (The parameter is
      automatically resolved from the ctlplane subnet's cidr attribute.)
    type: string
  ControlPlaneDefaultRoute:
    default: ''
    description: The default route of the control plane network. (The parameter
      is automatically resolved from the ctlplane subnet's gateway_ip attribute.)
    type: string
  ControlPlaneStaticRoutes:
    default: []
    description: >
      Routes for the ctlplane network traffic.
      JSON route e.g. [{'destination':'10.0.0.0/16', 'nexthop':'10.0.0.1'}]
      Unless the default is changed, the parameter is automatically resolved
      from the subnet host_routes attribute.
    type: json
  ControlPlaneMtu:
    default: 1500
    description: The maximum transmission unit (MTU) size(in bytes) that is
      guaranteed to pass through the data path of the segments in the network.
      (The parameter is automatically resolved from the ctlplane network's mtu attribute.)
    type: number

{% for network in roles_networks[item.name] %}
  {{ network }}{{ leaf.name if (RHOSP_version == 13.0 and leaf.name != DefaultLeaf0.name) else '' }}IpSubnet:
    default: ''
    description: IP address/subnet on the {{ network }}{{ leaf.name if (RHOSP_version == 13.0 and leaf.name != DefaultLeaf0.name) else '' }} network
    type: string
  {{ network }}{{ leaf.name if (RHOSP_version == 13.0 and leaf.name != DefaultLeaf0.name) else '' }}NetworkVlanID:
    default: {{ leaf.networks[network].vlan | default(1) }}
    description: Vlan ID for the {{ network }}{{ leaf.name if (RHOSP_version == 13.0 and leaf.name != DefaultLeaf0.name) else '' }} network traffic.
    type: number
  {{ network }}{{ leaf.name if (RHOSP_version == 13.0 and leaf.name != DefaultLeaf0.name) else '' }}Mtu:
    default: 1500
    description: The maximum transmission unit (MTU) size(in bytes) that is
      guaranteed to pass through the data path of the segments in the
      {{ network }}{{ leaf.name if (RHOSP_version == 13.0 and leaf.name != DefaultLeaf0.name) else '' }} network.
    type: number
  {{ network }}{{ leaf.name if (RHOSP_version == 13.0 and leaf.name != DefaultLeaf0.name) else '' }}InterfaceDefaultRoute:
    default: ''
    description: default route for the {{ network }}{{ leaf.name if (RHOSP_version == 13.0 and leaf.name != DefaultLeaf0.name) else '' }} network
    type: string
  {{ network }}{{ leaf.name if (RHOSP_version == 13.0 and leaf.name != DefaultLeaf0.name) else '' }}InterfaceRoutes:
    default: []
    description: >
      Routes for the {{ network }}{{ leaf.name if (RHOSP_version == 13.0 and leaf.name != DefaultLeaf0.name) else '' }} network traffic.
      JSON route e.g. [{'destination':'10.0.0.0/16', 'nexthop':'10.0.0.1'}]
      Unless the default is changed, the parameter is automatically resolved
      from the subnet host_routes attribute.
    type: json

{% endfor %}

  DnsServers: # Override this via parameter_defaults
    default: []
    description: >
      DNS servers to use for the Overcloud (2 max for some implementations).
      If not set the nameservers configured in the ctlplane subnet's
      dns_nameservers attribute will be used.
    type: comma_delimited_list
  DnsSearchDomains: # Override this via parameter_defaults
    default: []
    description: A list of DNS search domains to be added (in order) to resolv.conf.
    type: comma_delimited_list

resources:

  MinViableMtu:
    # This resource resolves the minimum viable MTU for interfaces, bonds and
    # bridges that carry multiple VLANs. Each VLAN may have different MTU. The
    # bridge, bond or interface must have an MTU to allow the VLAN with the
    # largest MTU.
    type: OS::Heat::Value
    properties:
      type: number
      value:
        yaql:
          expression: $.data.max()
          data:
            - {get_param: ControlPlaneMtu}
{% for network in roles_networks[item.name] if network != 'External' %}
            - {get_param: {{ network }}{{ leaf.name if (RHOSP_version == 13.0 and leaf.name != DefaultLeaf0.name) else '' }}Mtu}
{% endfor %}

  OsNetConfigImpl:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      config:
        str_replace:
          template:
            get_file: /usr/share/openstack-tripleo-heat-templates/network/scripts/run-os-net-config.sh
          params:
            $network_config:
              network_config:
{% if 'Dpdk' in item.name %}
              - type: linux_bridge
{% else %}
              - type: ovs_bridge
{% endif %}
{% if 'RHOSPVirtLab_ctlplane' not in leaf.networks.External.network %}
                name: br-vlans
{% else %}
                name: br-ex
{% endif %}
                mtu:
                  get_attr: [MinViableMtu, value]
                use_dhcp: false
                dns_servers:
                  get_param: DnsServers
                domain:
                  get_param: DnsSearchDomains
                addresses:
                - ip_netmask:
                    list_join:
                    - /
                    - - get_param: ControlPlaneIp
                      - get_param: ControlPlaneSubnetCidr
                routes:
                  list_concat_unique:
                    - get_param: ControlPlaneStaticRoutes
                    - - default: true
                        next_hop:
                          get_param: ControlPlaneDefaultRoute
                members:
                - type: interface
                  name: {{ interfaces[item.name].ControlPlane }}
                  mtu:
                    get_attr: [MinViableMtu, value]
                  # force the MAC address of the bridge to this interface
                  primary: true
{% for network in roles_networks[item.name] if ('RHOSPVirtLab_ctlplane' in leaf.networks[network].network) and (leaf.networks[network].vlan is defined) %}
                - type: vlan
                  mtu:
                    get_param: {{ network }}{{ leaf.name if (RHOSP_version == 13.0 and leaf.name != DefaultLeaf0.name) else '' }}Mtu
                  vlan_id:
                    get_param: {{ network }}{{ leaf.name if (RHOSP_version == 13.0 and leaf.name != DefaultLeaf0.name) else '' }}NetworkVlanID
                  addresses:
                  - ip_netmask:
                      get_param: {{ network }}{{ leaf.name if (RHOSP_version == 13.0 and leaf.name != DefaultLeaf0.name) else '' }}IpSubnet
                  routes:
                    list_concat_unique:
                      - get_param: {{ network }}{{ leaf.name if (RHOSP_version == 13.0 and leaf.name != DefaultLeaf0.name) else '' }}InterfaceRoutes
{% endfor %}
{% if ('External' in roles_networks[item.name]) and ('RHOSPVirtLab_external' in leaf.networks.External.network) %}
{% if 'Dpdk' in item.name %}
              - type: linux_bridge
{% else %}
              - type: ovs_bridge
{% endif %}
                name: br-ex
                mtu:
                  get_param: External{{ leaf.name if (RHOSP_version == 13.0 and leaf.name != DefaultLeaf0.name) else '' }}Mtu
                use_dhcp: false
                addresses:
                - ip_netmask:
                    get_param: External{{ leaf.name if (RHOSP_version == 13.0 and leaf.name != DefaultLeaf0.name) else '' }}IpSubnet
                routes:
                  list_concat_unique:
                    - get_param: External{{ leaf.name if (RHOSP_version == 13.0 and leaf.name != DefaultLeaf0.name) else '' }}InterfaceRoutes
                    - - default: true
                        next_hop:
                          get_param: External{{ leaf.name if (RHOSP_version == 13.0 and leaf.name != DefaultLeaf0.name) else '' }}InterfaceDefaultRoute
                members:
{% if (('Sriov' in item.name) or ('HwOffload' in item.name)) and ('v' in interfaces[item.name].External) %}
                - type: sriov_vf
                  device: {{ interfaces[item.name].External.split('v')[0] }}
                  vfid: {{ interfaces[item.name].External.split('v')[1] }}
                  mtu:
                    get_param: External{{ leaf.name if (RHOSP_version == 13.0 and leaf.name != DefaultLeaf0.name) else '' }}Mtu
                  # force the MAC address of the bridge to this interface
                  primary: true
{% else %}
                - type: interface
                  name: {{ interfaces[item.name].External }}
                  mtu:
                    get_param: External{{ leaf.name if (RHOSP_version == 13.0 and leaf.name != DefaultLeaf0.name) else '' }}Mtu
                  # force the MAC address of the bridge to this interface
                  primary: true
{% endif %}
{% for network in roles_networks[item.name] if ('RHOSPVirtLab_external' in leaf.networks[network].network) and (leaf.networks[network].vlan is defined) %}
                - type: vlan
                  mtu:
                    get_param: {{ network }}{{ leaf.name if (RHOSP_version == 13.0 and leaf.name != DefaultLeaf0.name) else '' }}Mtu
                  vlan_id:
                    get_param: {{ network }}{{ leaf.name if (RHOSP_version == 13.0 and leaf.name != DefaultLeaf0.name) else '' }}NetworkVlanID
                  addresses:
                  - ip_netmask:
                      get_param: {{ network }}{{ leaf.name if (RHOSP_version == 13.0 and leaf.name != DefaultLeaf0.name) else '' }}IpSubnet
                  routes:
                    list_concat_unique:
                      - get_param: {{ network }}{{ leaf.name if (RHOSP_version == 13.0 and leaf.name != DefaultLeaf0.name) else '' }}InterfaceRoutes
{% endfor %}
{% endif %}

{% if ('Dpdk' in item.name) and (interfaces[item.name].DpdkBonds is defined) and (interfaces[item.name].DpdkBonds|length > 0) %}
              - type: ovs_user_bridge
                name: br-dpdk
                use_dhcp: false
                members:
{% for dpdkbond in interfaces[item.name].DpdkBonds %}
                - type: ovs_dpdk_bond
                  name: {{ dpdkbond.name }}
                  mtu: 9000
                  rx_queue: 1
                  ovs_extra:
{% for port in dpdkbond.ports %}
                    - set Interface {{ port.name }} options:n_rxq_desc=4096
                    - set Interface {{ port.name }} options:n_txq_desc=4096
{% endfor %}
                  members:
{% for port in dpdkbond.ports %}
                  - type: ovs_dpdk_port
                    name: {{ port.name }}
                    driver: {{ port.driver }}
                    members:
{% if 'v' in port.interface %}
                    - type: sriov_vf
                      device: {{ port.interface.split('v')[0] }}
                      vfid: {{ port.interface.split('v')[1] }}
{% else %}
                    - type: interface
                      name: {{ port.interface }}
{% endif %}
{% endfor %}
{% endfor %}
{% endif %}

{% if (('Sriov' in item.name) or ('HwOffload' in item.name)) and (interfaces[item.name].Sriov is defined) %}
{% for sriovif in interfaces[item.name].Sriov %}
              - type: sriov_pf
                name: {{ sriovif.device }}
                numvfs: {{ sriovif.numvfs }}
                promisc: true
                use_dhcp: false
                nm_controlled: true
                mtu:
                  get_param: ExternalMtu
                defroute: false
{% if 'HwOffload' in item.name %}
                link_mode: switchdev
{% endif %}
{% endfor %}
{% endif %}

outputs:
  OS::stack_id:
    description: The OsNetConfigImpl resource.
    value:
      get_resource: OsNetConfigImpl
