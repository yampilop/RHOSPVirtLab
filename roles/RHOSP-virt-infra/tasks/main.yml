---
# tasks file for RHOSP-virt-infra

- name: Ensure the ssh directory exists
  file:
    path: "/home/{{ ansible_user }}/.ssh"
    state: directory

- name: Create ssh key
  openssh_keypair:
    path: "/home/{{ ansible_user }}/.ssh/id_rsa"

- name: Get ssh public key into variable
  set_fact:
    ssh_public_key: "{{ lookup('file', '/home/{{ ansible_user }}/.ssh/id_rsa.pub') }}"

- name: Ensure packages are installed
  dnf:
    name:
      - libvirt
      - libvirt-bash-completion
      - libguestfs-tools
      - ipmitool
      - '@python36'
      - python3-lxml
      - python3-libvirt
    state: present
  become: yes

- name: Ensure the needed groups exist
  group:
    name: "{{ item }}"
    state: present
  loop:
    - libvirt
    - kvm

- name: Ensure the user belongs to the proper groups
  user:
    name: "{{ ansible_user }}"
    groups:
      - libvirt
      - kvm
    append: yes

- name: Ensure libvirtd service is enabled and running
  service:
    name: libvirtd
    state: started
    enabled: yes
  become: yes

- name: Ensure NetworkManager service is enabled and running
  service:
    name: NetworkManager
    state: started
    enabled: yes
  become: yes

- name: Install packages from pip
  pip:
    name:
      - virtualbmc
      - netaddr

- name: VIRTUALBMC - Create VirtualBMC systemd unit
  template:
    src: vbmcd.service
    dest: /etc/systemd/system/vbmcd.service
    owner: root
    group: root
    mode: '0644'
  become: yes

- name: VIRTUALBMC - Reload systemd daemon
  systemd:
    daemon_reload: yes
  become: yes

- name: VIRTUALBMC - Enable and start vbmcd service
  service:
    name: vbmcd
    state: started
    enabled: yes
  become: yes

- name: Clean VirtualBMC
  import_tasks: clean_virtualbmc.yml
  when: cleanup

- name: Clean libvirt domains
  import_tasks: clean_libvirt_domains.yml
  when: cleanup

- name: Clean libvirt storage pools and images
  import_tasks: clean_libvirt_storage.yml
  when: cleanup

- name: Clean libvirt networks
  import_tasks: clean_libvirt_networks.yml
  when: cleanup

- name: Configure libvirt networks
  import_tasks: create_libvirt_networks.yml
  when: create

- name: Configure libvirt storage pools and images
  import_tasks: create_libvirt_storage.yml
  when: create

- name: Configure libvirt domains
  import_tasks: create_libvirt_domains.yml
  when: create

- name: Install and configure VirtualBMC
  import_tasks: create_virtualbmc.yml
  when: create

- name: Get bridge interfaces members
  set_fact:
    interfaces_reverted: "{{ ansible_facts | json_query('@.* | [?device].{key: device, value: interfaces}') | items2dict }}"

- name: Bridge hypervisor interfaces to libvirt bridges
  nmcli:
    type: bridge-slave
    conn_name: "{{ item.hypervisor_if }}"
    ifname: "{{ item.hypervisor_if }}"
    master: '{{ item.bridge }}'
    autoconnect: yes
    state: present
  become: yes
  when: ( item.hypervisor_if is defined ) and ( interfaces_reverted[item.bridge] is defined ) and ( item.hypervisor_if not in interfaces_reverted[item.bridge] )
  loop: "{{ networks }}"

- name: Enable masquerade in the firewall to allow external traffic
  firewalld:
    zone: "{{ item }}"
    masquerade: yes
    permanent: yes
    immediate: yes
    state: enabled
  when: (ansible_facts.services['firewalld.service'] is defined) and (ansible_facts.services['firewalld.service'].state == 'running')
  loop:
    - public
    - libvirt
  become: yes

