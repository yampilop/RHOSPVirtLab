---
# tasks file for RHOSP-virt-infra

- name: Verify the RHOSP version selected is supported
  fail:
    msg: "The selected RHOSP version ({{ RHOSP_version }}) is not supported by this role."
  when: RHOSP_version_supported[RHOSP_version] is not defined

- name: Verify vms profiles
  import_tasks: tasks/profiles.yml

- name: Ensure the ssh directory exists
  file:
    path: "/home/{{ ansible_user }}/.ssh"
    state: directory

- name: Create ssh key
  openssh_keypair:
    path: "/home/{{ ansible_user }}/.ssh/id_rsa"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"

- name: Get ssh public key into variable
  set_fact:
    ssh_public_key: "{{ lookup('file', '/home/{{ ansible_user }}/.ssh/id_rsa.pub') }}"

- name: Ensure packages are installed
  dnf:
    name:
      - libvirt
      - libvirt-bash-completion
      - libguestfs-tools
      - ipmitool
      - "@python36"
      - python3-lxml
      - python3-libvirt
    state: present
  become: yes

- name: Ensure the needed groups exist
  group:
    name: "{{ item }}"
    state: present
  loop:
    - libvirt
    - kvm

- name: Ensure the user belongs to the proper groups
  user:
    name: "{{ ansible_user }}"
    groups:
      - libvirt
      - kvm
    append: yes

- name: Ensure required services are enabled and running
  service:
    name: "{{ item }}"
    state: started
    enabled: yes
  become: yes
  loop:
    - libvirtd
    - NetworkManager
    - firewalld

- name: Install packages from pip
  pip:
    name:
      - virtualbmc
      - netaddr

- name: VIRTUALBMC - Create VirtualBMC systemd unit
  template:
    src: "vbmcd.service"
    dest: "/etc/systemd/system/vbmcd.service"
    owner: root
    group: root
    mode: "0644"
  become: yes

- name: VIRTUALBMC - Reload systemd daemon
  systemd:
    daemon_reload: yes
  become: yes

- name: VIRTUALBMC - Enable and start vbmcd service
  service:
    name: vbmcd
    state: started
    enabled: yes
  become: yes

- name: Clean VirtualBMC
  import_tasks: clean_virtualbmc.yml
  when: cleanup

- name: Clean libvirt domains
  import_tasks: clean_libvirt_domains.yml
  when: cleanup

- name: Clean libvirt storage pools and images
  import_tasks: clean_libvirt_storage.yml
  when: cleanup

- name: Clean libvirt networks
  import_tasks: clean_libvirt_networks.yml
  when: cleanup

- name: Define bridges for networks linked with the hypervisor
  set_fact:
    network_connections: "{{ network_connections + [connection] }}"
  vars:
    ip:
      dhcp4: no
      auto6: no
      address:
        - "{% if item.ipv4 %}{{ (item.ipv4.address ~ '/' ~ item.ipv4.netmask) | ipaddr('host/prefix') }}{% endif %}"
    noip:
      dhcp4: no
      auto6: no
    connection:
      name: "{{ item.bridge }}"
      interface_name: "{{ item.bridge }}"
      type: bridge
      autoconnect: yes
      ip: "{% if item.ipv4 %}{{ ip }}{% else %}{{ noip }}{% endif %}"
      state: up
  when: item.forward == 'bridge' and item.hypervisor_if is defined
  loop: "{{ networks }}"

- name: Define hypervisor interfaces
  set_fact:
    network_connections: "{{ network_connections + [connection] }}"
  vars:
    connection:
      name: "{{ item.hypervisor_if }}"
      interface_name: "{{ item.hypervisor_if }}"
      type: ethernet
      autoconnect: yes
      ip:
        dhcp4: no
        auto6: no
      state: up
  when: item.forward == 'bridge' and item.hypervisor_if is defined
  loop: "{{ networks }}"

- name: Define network configuration for interfaces bridged to libvirt
  set_fact:
    network_connections: "{{ network_connections + [connection] }}"
  vars:
    connection:
      name: "{{ item.hypervisor_if }}"
      interface_name: "{{ item.hypervisor_if }}"
      type: ethernet
      controller: "{{ item.bridge }}"
      port_type: bridge
      autoconnect: yes
      state: up
  when: item.forward == 'bridge' and item.hypervisor_if is defined
  loop: "{{ networks }}"

- name: Configure network using system role
  include_role:
    name: rhel-system-roles.network
  vars:
    network_allow_restart: yes

- name: Gather facts again to get interfaces
  setup:

- name: Configure libvirt networks
  import_tasks: create_libvirt_networks.yml
  when: create

- name: Configure libvirt storage pools and images
  import_tasks: create_libvirt_storage.yml
  when: create

- name: Configure libvirt domains
  import_tasks: create_libvirt_domains.yml
  when: create

- name: Install and configure VirtualBMC
  import_tasks: create_virtualbmc.yml
  when: create

- name: Enable masquerade in the firewall to allow external traffic
  firewalld:
    zone: "{{ item }}"
    masquerade: yes
    permanent: yes
    immediate: yes
    state: enabled
  when: (ansible_facts.services['firewalld.service'] is defined) and (ansible_facts.services['firewalld.service'].state == 'running')
  loop:
    - public
    - libvirt
  become: yes

- name: Set port forwarding rules
  firewalld:
    rich_rule: rule family=ipv4 forward-port port={{ item }} protocol=tcp to-port={{ item }} to-addr={{ overcloud_ip }}
    zone: public
    permanent: yes
    immediate: yes
    state: enabled
  loop: "{{ forwarded_ports }}"

- name: Create stack alias to connect to undercloud
  lineinfile:
    path: "/home/{{ ansible_user }}/.bashrc"
    line: "alias stack='ssh stack@undercloud'"
    insertafter: EOF
    state: present
