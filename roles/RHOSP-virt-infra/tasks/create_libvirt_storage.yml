- name: STORAGE - Create storage directory
  file:
    path: "{{ pool_location }}"
    state: directory
    mode: "0777"
  become: yes

- name: STORAGE - Define the pool from the template
  community.libvirt.virt_pool:
    command: define
    name: "{{ item }}"
    xml: '{{ lookup("template", "{{ item }}.xml.j2") }}'
  when: ansible_libvirt_pools[item] is not defined
  loop:
    - RHOSPVirtLab_storage
  become: yes

- name: STORAGE - Gather facts about libvirt storage pools
  community.libvirt.virt_pool:
    command: facts

- name: STORAGE - Activate the pool
  community.libvirt.virt_pool:
    state: active
    name: "{{ item }}"
  when: (ansible_libvirt_pools[item] is defined) and (ansible_libvirt_pools[item]['status'] != 'active')
  loop:
    - RHOSPVirtLab_storage
  become: yes

- name: STORAGE - Enable autostart for the pool
  community.libvirt.virt_pool:
    autostart: yes
    name: "{{ item }}"
  when: (ansible_libvirt_pools[item] is defined) and (ansible_libvirt_pools[item]['autostart'] != 'yes')
  loop:
    - RHOSPVirtLab_storage
  become: yes

- name: STORAGE - Render user-data
  template:
    src: "user-data.j2"
    dest: "/home/{{ ansible_user }}/user-data"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
  register: user_data

- name: STORAGE - Copy meta-data
  copy:
    src: "templates/meta-data"
    dest: "/home/{{ ansible_user }}/meta-data"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
  register: meta_data

- name: STORAGE - Create undercloud-init.iso image with user-data and meta-data
  command: "genisoimage -output /home/{{ ansible_user }}/undercloud-init.iso -volid cidata -joliet -rock /home/{{ ansible_user }}/user-data /home/{{ ansible_user }}/meta-data"
  when: user_data.changed or meta_data.changed
  register: overcloud_init

- name: STORAGE - Copy undercloud-init.iso to the pool location
  copy:
    src: "/home/{{ ansible_user }}/undercloud-init.iso"
    dest: "{{ pool_location }}/undercloud-init.iso"
    mode: "0777"
    owner: root
    group: root
  become: yes
  when: overcloud_init.changed
  register: overcloud_init_pool

- name: STORAGE - Download the rhel base image
  get_url:
    url: "{{ RHOSP_version_supported[RHOSP_version].rhel_image.url }}"
    dest: "{{ pool_location }}/{{ RHOSP_version_supported[RHOSP_version].rhel_image.name }}"
    mode: "0777"
    owner: root
    group: root
    timeout: 30
  retries: 3
  delay: 10
  register: result
  until: result is not failed

- name: STORAGE - Check if the needed image files exist
  stat:
    path: "{{ pool_location }}/{{ item }}"
  register: files_output
  loop:
    - "{{ RHOSP_version_supported[RHOSP_version].rhel_image.name }}"
    - "undercloud-init.iso"

- name: STORAGE - Fail when any of the files does not exist
  fail:
    msg: "{{ item.item }} does not exist"
  when: item.stat.exists == false
  loop: "{{ files_output.results  }}"

- name: STORAGE - Check if the root disk file exists
  stat:
    path: "{{ pool_location }}/{{ item.name }}_root.qcow2"
    get_checksum: False
    get_md5: False
  register: disk_file
  loop: "{{ vms }}"

- name: STORAGE - Check if the data disk file exists
  stat:
    path: "{{ pool_location }}/{{ item.name }}_data.qcow2"
    get_checksum: False
    get_md5: False
  register: data_disk_file
  when: item.data_disk_size is defined and item.data_disk_size > 0
  loop: "{{ vms }}"

- name: STORAGE - Create root disk file
  command: "virsh vol-create-as RHOSPVirtLab_storage {{ item.item.name }}_root.qcow2 --capacity {{ item.item.disk_size }} --allocation {{ item.item.disk_size }} --prealloc-metadata --format qcow2"
  when: not item.stat.exists
  loop: "{{ disk_file.results }}"
  become: yes
  notify: HANDLER - Clean known_hosts file

- name: STORAGE - Create data disk file
  command: "virsh vol-create-as RHOSPVirtLab_storage {{ item.item.name }}_data.qcow2 --capacity {{ item.item.data_disk_size }} --allocation {{ item.item.data_disk_size }} --prealloc-metadata --format qcow2"
  when: not item.stat.exists
  loop: "{{ data_disk_file.results }}"
  become: yes

- name: STORAGE - Set permissions to disk files
  file:
    path: "{{ pool_location }}/{{ item.name }}_root.qcow2"
    mode: "777"
  loop: "{{ vms }}"
  become: yes

- name: STORAGE - Prepare backing stored disk files and resize root partition
  command: "virt-resize --expand {{ RHOSP_version_supported[RHOSP_version].rhel_image.main_partition }} {{ pool_location }}/{{ item.item.backing_store }} {{ pool_location }}/{{ item.item.name }}_root.qcow2"
  when: (not item.stat.exists) and (item.item.backing_store != '')
  loop: "{{ disk_file.results }}"
  become: yes
  notify: HANDLER - Clean known_hosts file
