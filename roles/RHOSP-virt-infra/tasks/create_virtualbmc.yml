- name: VIRTUALBMC - Get node states
  shell: "{{ vbmc_path }} list 2>/dev/null | awk '/{{ item.name }}/ {print $4,$8}'"
  register: vbmc_status
  loop: "{{ vms }}"
  changed_when: False
  when: inventory_hostname in item.hypervisor

- name: VIRTUALBMC - Ensure node exists
  command: "{{ vbmc_path }} add --username admin --password admin --port {{ item.item.bmcport }} {{ item.item.name }}"
  loop: "{{ vbmc_status.results }}"
  when:
    - item.stdout is defined
    - not item.stdout

- name: VIRTUALBMC - Get node states again
  shell: "{{ vbmc_path }} list 2>/dev/null | grep running | awk '/{{ item.name }}/ {print $4,$8}'"
  register: vbmc_running
  loop: "{{ vms }}"
  changed_when: False
  when: inventory_hostname in item.hypervisor

- name: VIRTUALBMC - Start node
  command: "{{ vbmc_path }} start {{ item.item.name }}"
  loop: "{{ vbmc_running.results }}"
  when:
    - item.stdout is defined
    - not item.stdout

- name: VIRTUALBMC - Get service facts
  service_facts:

- name: VIRTUALBMC - Ensure port rules are configured to the firewall in libvirt zone
  firewalld:
    port: "{{ item.bmcport }}/udp"
    zone: "libvirt"
    permanent: yes
    immediate: yes
    state: enabled
  loop: "{{ vms }}"
  become: yes
  when:
    - inventory_hostname == 'localhost'
    - ansible_distribution_version | int >= 8

- name: VIRTUALBMC - Ensure port rules are configured to the firewall in public zone
  firewalld:
    port: "{{ item.bmcport }}/udp"
    zone: "public"
    permanent: yes
    immediate: yes
    state: enabled
  loop: "{{ vms }}"
  become: yes
  when:
    - inventory_hostname != 'localhost'
    - inventory_hostname in item.hypervisor
